1. What advantages do Excel spreadsheets have over CSV spreadsheets?
Ans:-
Excel spreadsheets and CSV (Comma-Separated Values) spreadsheets both have their own advantages and disadvantages depending on the specific use case
Advantage and disadvantage are in excel spreadsheer vs CSV files:-
Advanced Formatting Options: Excel allows you to format the data in a spreadsheet in many different ways, such as bolding, italicizing, coloring, 
and adding borders to cells. This makes it easier to visually analyze the data and make it more presentable.

Complex Calculations: Excel provides advanced mathematical functions and formulas that allow for complex calculations to be performed on the data within a spreadsheet.

Graphical Representations: Excel provides various graphical representations such as charts, graphs, and pivot tables to help users understand the data more easily.

Data Validation: Excel provides the ability to validate data entries in a spreadsheet by setting up rules or conditions that must be met.

Integration with Other Microsoft Tools: Excel is part of the Microsoft Office suite of applications, which means it can easily integrate with other 
Microsoft tools such as Word, PowerPoint, and Outlook.

2.What do you pass to csv.reader() and csv.writer() to create reader and writer objects?
Ans:-
To create reader and writer objects in Python's csv module, you need to pass a file object or a 
file-like object to the csv.reader() and csv.writer() functions, respectively.
Here are example below :-
import csv

with open('file.csv', 'r') as file:
    reader = csv.reader(file)

In order to write mode using the open() function, and the resulting file object is passed to csv.writer() to create a writer object. 
The newline='' parameter is passed to avoid adding additional line breaks between rows.
import csv

with open('file.csv', 'w', newline='') as file:
    writer = csv.writer(file)

3. What modes do File objects for reader and writer objects need to be opened in?
Ans:-
When creating a reader object using the csv.reader() function in Python's csv module, the file object passed to it should be
opened in text mode with the 'r' option. This allows the reader object to read the contents of the file as text.
hen creating a writer object using the csv.writer() function in Python's csv module, the file object passed to it should be opened in text 
mode with the 'w' option. This allows the writer object to write text to the file.
Here are example below to open file in order to read and write:-
To read -
import csv

with open('example.csv', mode='r') as file:
    reader = csv.reader(file)

To write:-
import csv

with open('example.csv', mode='w', newline='') as file:
    writer = csv.writer(file)


4. What method takes a list argument and writes it to a CSV file?
Ans:-
To write a list of values to a CSV file in Python using the csv module, you can use the writerow() method of
a csv.writer() object. This method takes a list argument that contains the values you want to write to a CSV file.
example are below:-
import csv

# open the file in write mode and create a writer object
with open('example.csv', mode='w', newline='') as file:
    writer = csv.writer(file)

    # write the header row
    writer.writerow(['Name', 'Age', 'City'])

    # write the data rows
    writer.writerow(['John', '25', 'New York'])
    writer.writerow(['Jane', '30', 'San Francisco'])
    writer.writerow(['Bob', '40', 'Seattle'])


5. What do the keyword arguments delimiter and line terminator do?
Ans:-
delimiter: This argument specifies the character used to separate fields in a CSV file. By default, it is set to ','. For example, 
if you have a CSV file with fields separated by tabs instead of commas, you can specify the delimiter as a tab character using the delimiter='\t' argument.

lineterminator: This argument specifies the character used to terminate each line in a CSV file. By default, it is set to '\r\n' on Windows systems and 
'\n' on Unix-based systems. For example, if you want to write a CSV file that uses the Unix line terminator .

6. What function takes a string of JSON data and returns a Python data structure?
Ans;-
The function that takes a string of JSON data and returns a Python data structure is json.loads(). The json.loads() function is part of the built-in json 
module in Python, which provides methods for working with JSON data.
Here are example as below:-
import json

# sample JSON string
json_str = '{"name": "John", "age": 30, "city": "New York"}'

# convert JSON string to a Python dictionary
data = json.loads(json_str)

# print the resulting dictionary
print(data)


7. What function takes a Python data structure and returns a string of JSON data?
Ans:-
The function that takes a Python data structure and returns a string of JSON data is json.dumps(). The json.dumps() function is part of the built-in json module
in Python, which provides methods for working with JSON data.
Here is an example to return in python data string fron json:-
import json

# sample Python dictionary
data = {"name": "John", "age": 30, "city": "New York"}

# convert dictionary to JSON string
json_str = json.dumps(data)

# print the resulting JSON string
print(json_str)













